%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAAUGAUGCAGCCAAGGAUGACUUGCCGACUUACCUCUGCAUACAAUUUGUUCUACUGCAGCUUUGAAGAGAGAUAAGAGGAACAAGUGGGCAAGUUGUCUUUGGCUAGACAGUUCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[113.96665192 526.89428711]
[113.21298981 511.91320801]
[104.84598541 499.59075928]
[111.88013458 485.41928101]
[111.12647247 470.43820190]
[110.37280273 455.45715332]
[109.61914062 440.47610474]
[98.43334961 430.70809937]
[97.45561981 415.52593994]
[107.77703857 403.85946655]
[96.59124756 394.09149170]
[95.61351013 378.90930176]
[105.93492889 367.24282837]
[105.18126678 352.26177979]
[104.42760468 337.28073120]
[103.67393494 322.29968262]
[102.92027283 307.31863403]
[102.16660309 292.33758545]
[101.41294098 277.35650635]
[100.65927887 262.37545776]
[99.90560913 247.39440918]
[99.15194702 232.41336060]
[98.39828491 217.43229675]
[97.64461517 202.45124817]
[96.89095306 187.47018433]
[96.13729095 172.48913574]
[95.38362122 157.50808716]
[94.62995911 142.52702332]
[93.87629700 127.54597473]
[93.12262726 112.56491852]
[85.69414520 100.71969604]
[91.89631653 88.18874359]
[91.14265442 73.20769501]
[90.38898468 58.22663879]
[89.63532257 43.24558258]
[77.89085388 26.95323372]
[87.17090607 10.06468487]
[85.66548157 -4.85958004]
[84.16005707 -19.78384590]
[82.65462494 -34.70811081]
[81.14920044 -49.63237762]
[70.05673981 -52.69087219]
[60.47479248 -59.01278305]
[53.33225632 -67.96538544]
[49.31538773 -78.66191101]
[48.80189514 -90.04940033]
[51.82547760 -101.01230621]
[58.07415009 -110.48182678]
[66.92235565 -117.54007721]
[77.49355316 -121.50903320]
[77.49355316 -136.50903320]
[77.49355316 -151.50903320]
[69.75625610 -165.30920410]
[77.49355316 -178.03648376]
[77.49355316 -193.03648376]
[77.49355316 -208.03648376]
[63.71968842 -214.61244202]
[54.16976166 -226.51881409]
[50.73992157 -241.39157104]
[54.11116409 -256.27770996]
[63.61413193 -268.22161865]
[77.36199951 -274.85177612]
[92.62511444 -274.85177612]
[106.37297821 -268.22161865]
[115.87594604 -256.27770996]
[119.24719238 -241.39157104]
[115.81735229 -226.51881409]
[106.26742554 -214.61244202]
[92.49355316 -208.03648376]
[92.49355316 -193.03648376]
[92.49355316 -178.03648376]
[100.23085785 -165.30920410]
[92.49355316 -151.50903320]
[92.49355316 -136.50903320]
[92.49355316 -121.50903320]
[109.26620483 -113.10953522]
[119.60932922 -97.36446381]
[120.66666412 -78.47541809]
[112.07282257 -61.53140259]
[96.07347107 -51.13780212]
[97.57889557 -36.21353531]
[99.08432007 -21.28927040]
[100.58974457 -6.36500597]
[102.09516907 8.55925941]
[110.66091156 14.37742519]
[114.63699341 24.17737770]
[112.45763397 34.75196075]
[104.61637878 42.49192047]
[105.37004089 57.47297287]
[106.12370300 72.45402527]
[106.87737274 87.43508148]
[114.30585480 99.28030396]
[108.10368347 111.81125641]
[108.85734558 126.79230499]
[109.61101532 141.77336121]
[110.36467743 156.75440979]
[111.11833954 171.73547363]
[111.87200928 186.71652222]
[112.62567139 201.69758606]
[113.37933350 216.67863464]
[114.13300323 231.65968323]
[114.88666534 246.64074707]
[115.64033508 261.62179565]
[116.39399719 276.60284424]
[117.14765930 291.58389282]
[117.90132904 306.56497192]
[118.65499115 321.54602051]
[119.40865326 336.52706909]
[120.16232300 351.50811768]
[120.91598511 366.48916626]
[132.35615540 377.06085205]
[132.90705872 392.26449585]
[122.75808716 403.10580444]
[134.19825745 413.67749023]
[134.74917603 428.88113403]
[124.60019684 439.72244263]
[125.35385895 454.70349121]
[126.10752106 469.68453979]
[126.86119080 484.66561890]
[135.28208923 498.05960083]
[128.19404602 511.15954590]
[128.94770813 526.14062500]
[135.78224182 541.65594482]
[122.76523590 552.51843262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[4 119]
[5 118]
[6 117]
[7 116]
[10 113]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[32 91]
[33 90]
[34 89]
[35 88]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[50 75]
[51 74]
[52 73]
[54 71]
[55 70]
[56 69]
] def

init

% Start Annotations
12 32 8 RED omark 93 113 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
