%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCGAUUUUCUCGAAUUCACUUGAUGCAAAUAGGGAACCGGCGAUCCAAAGAUCGGCAACGGAAAGUAGAGAUCGCUUCCCGACCUGCACCAAGCGAAUUCGAGAGCUCGACGAGA\
) } def
/len { sequence length } bind def

/coor [
[104.43899536 451.15451050]
[103.64736938 436.17541504]
[102.85573578 421.19628906]
[94.45753479 408.89511108]
[101.45574188 394.70584106]
[100.66410828 379.72674561]
[99.87248230 364.74765015]
[91.05037689 356.35678101]
[90.33870697 343.79919434]
[98.67237854 333.84747314]
[98.27642822 318.85269165]
[97.88047028 303.85794067]
[97.48451996 288.86315918]
[97.08856964 273.86837769]
[96.69261169 258.87359619]
[96.29666138 243.87882996]
[95.90071106 228.88406372]
[95.50475311 213.88928223]
[95.10880280 198.89451599]
[94.71284485 183.89974976]
[86.64228058 171.38114929]
[94.01260376 157.38154602]
[93.61665344 142.38676453]
[93.22070312 127.39199829]
[92.82474518 112.39722443]
[85.68104553 100.37810516]
[92.18048096 87.99872589]
[91.78452301 73.00395966]
[91.38857269 58.00918198]
[90.99262238 43.01441193]
[77.59848785 35.62898254]
[69.75122833 22.61678314]
[69.47257233 7.52411222]
[76.73722839 -5.59384346]
[89.50656891 -13.26257992]
[89.11061096 -28.25735283]
[88.71466064 -43.25212479]
[88.31870270 -58.24689865]
[85.44383240 -62.90581131]
[84.79920959 -67.71386719]
[86.04792023 -71.76525116]
[88.53237915 -74.43317413]
[89.32400513 -89.41226959]
[90.11563873 -104.39136505]
[90.90726471 -119.37046814]
[91.69889832 -134.34956360]
[92.49053192 -149.32865906]
[93.28215790 -164.30775452]
[93.87599945 -179.29598999]
[79.39439392 -186.58216858]
[69.55094910 -199.38986206]
[66.26028442 -215.14530945]
[70.12654114 -230.70979309]
[80.33319855 -243.00495911]
[94.81488037 -249.62158203]
[94.81488037 -264.62158203]
[94.81488037 -279.62158203]
[86.15117645 -293.54537964]
[94.11530304 -307.88082886]
[110.51445007 -307.88082886]
[118.47858429 -293.54537964]
[109.81488037 -279.62158203]
[109.81488037 -264.62158203]
[109.81488037 -249.62158203]
[122.65110779 -244.18893433]
[132.46154785 -234.22642517]
[137.72877502 -221.22758484]
[137.61999512 -207.15904236]
[132.11848450 -194.16313171]
[122.03124237 -184.23150635]
[108.87077332 -178.90003967]
[111.87740326 -172.04454041]
[108.26125336 -163.51612854]
[107.46962738 -148.53703308]
[106.67799377 -133.55793762]
[105.88636017 -118.57883453]
[105.09473419 -103.59973907]
[104.30310059 -88.62064362]
[103.51147461 -73.64154816]
[103.31347656 -58.64285278]
[103.70943451 -43.64807892]
[104.10538483 -28.65330696]
[104.50133514 -13.65853310]
[117.65760803 -6.67439032]
[125.60443878 6.04189014]
[126.12268829 21.12823486]
[118.97309113 34.53644180]
[105.98739624 42.61845779]
[106.38334656 57.61323166]
[106.77929688 72.60800171]
[107.17525482 87.60277557]
[114.31895447 99.62189484]
[107.81951904 112.00127411]
[108.21547699 126.99604034]
[108.61142731 141.99081421]
[109.00737762 156.98559570]
[117.10626221 170.57670593]
[109.70761871 183.50378418]
[110.10357666 198.49856567]
[110.49952698 213.49333191]
[110.89547729 228.48811340]
[111.29143524 243.48287964]
[111.68738556 258.47766113]
[112.08334351 273.47244263]
[112.47929382 288.46719360]
[112.87524414 303.46197510]
[113.27120209 318.45675659]
[113.66715240 333.45150757]
[123.66706085 348.84417725]
[114.85157776 363.95599365]
[115.64320374 378.93508911]
[116.43483734 393.91418457]
[124.88966370 407.28680420]
[117.83483124 420.40466309]
[118.62646484 435.38375854]
[119.41809082 450.36285400]
[126.29192352 465.86083984]
[113.30249023 476.75628662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[5 112]
[6 111]
[7 110]
[10 108]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[20 98]
[22 96]
[23 95]
[24 94]
[25 93]
[27 91]
[28 90]
[29 89]
[30 88]
[35 83]
[36 82]
[37 81]
[38 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 71]
[55 64]
[56 63]
[57 62]
] def

init

% Start Annotations
11 29 8 RED omark 91 109 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
