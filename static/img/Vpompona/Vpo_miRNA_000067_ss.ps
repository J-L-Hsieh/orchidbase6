%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAUUGUUUUGGUAGCCAAGGAUGACUUGCCUGCGUCCUUGUUGGAGAAAUCUCUACUUGGGUGUCUCUGCUGCGGUCUGAGGCAGUCUCCUUGGCUAUCCAAAGUGGCUCU\
) } def
/len { sequence length } bind def

/coor [
[93.17781067 464.70959473]
[92.35867310 449.73196411]
[83.93789673 437.44622803]
[90.91003418 423.24411011]
[90.09089661 408.26651001]
[89.27175903 393.28887939]
[86.77243805 390.62161255]
[85.51328278 386.55963135]
[86.15909576 381.73468018]
[89.05008698 377.06143188]
[89.45980835 362.06701660]
[89.86953735 347.07260132]
[90.27925873 332.07821655]
[90.68898010 317.08380127]
[90.89385986 302.08520508]
[90.89385986 287.08520508]
[90.89385986 272.08520508]
[90.89385986 257.08520508]
[90.89385986 242.08520508]
[90.89385986 227.08520508]
[90.89385986 212.08520508]
[90.89385986 197.08520508]
[90.89385986 182.08520508]
[90.89385986 167.08520508]
[87.70386505 160.30464172]
[91.10433197 151.67687988]
[91.51405334 136.68247986]
[91.92378235 121.68807220]
[92.33350372 106.69367218]
[89.35581207 99.07575989]
[92.96477509 91.29684448]
[93.78391266 76.31922913]
[94.60305023 61.34161377]
[95.42218781 46.36399460]
[85.15186310 34.65253830]
[86.19594574 19.47477531]
[97.42432404 9.75576401]
[90.45218658 -4.44634390]
[98.87296295 -16.73209572]
[99.69210815 -31.70971298]
[86.39674377 -39.12555313]
[77.67516327 -51.52801514]
[75.21343994 -66.42633820]
[79.44698334 -80.85679626]
[89.48470306 -91.97226715]
[103.29591370 -97.60395050]
[104.11505127 -112.58156586]
[104.93418884 -127.55918121]
[105.75332642 -142.53680420]
[106.57246399 -157.51441956]
[99.60032654 -171.71652222]
[108.02111053 -184.00227356]
[108.84024811 -198.97988892]
[109.65938568 -213.95750427]
[110.47852325 -228.93513489]
[99.74484253 -240.53527832]
[100.44101715 -256.32424927]
[112.15400696 -266.93466187]
[127.93471527 -266.07162476]
[138.42071533 -254.24708557]
[137.39086914 -238.47639465]
[125.45613861 -228.11598206]
[124.63700104 -213.13836670]
[123.81786346 -198.16075134]
[122.99872589 -183.18313599]
[130.02944946 -170.05233765]
[121.55008698 -156.69528198]
[120.73094940 -141.71766663]
[119.91181183 -126.74004364]
[119.09266663 -111.76242828]
[118.27352905 -96.78481293]
[131.38819885 -89.68052673]
[140.15385437 -77.53668976]
[142.78842163 -62.73060989]
[138.71664429 -48.18960571]
[128.69451904 -36.81225204]
[114.66972351 -30.89057541]
[113.85058594 -15.91295815]
[120.88130951 -2.78214955]
[112.40193939 10.57490253]
[122.50343323 21.46046257]
[121.88607025 36.66156387]
[110.39980316 47.18313217]
[109.58066559 62.16075134]
[108.76152802 77.13836670]
[107.94239044 92.11598206]
[107.32790375 107.10339355]
[106.91818237 122.09779358]
[106.50846100 137.09219360]
[106.09873962 152.08660889]
[105.89385986 167.08520508]
[105.89385986 182.08520508]
[105.89385986 197.08520508]
[105.89385986 212.08520508]
[105.89385986 227.08520508]
[105.89385986 242.08520508]
[105.89385986 257.08520508]
[105.89385986 272.08520508]
[105.89385986 287.08520508]
[105.89385986 302.08520508]
[109.05739594 310.80264282]
[105.68338013 317.49353027]
[105.27365875 332.48791504]
[104.86393738 347.48233032]
[104.45421600 362.47674561]
[104.04449463 377.47113037]
[104.24937439 392.46972656]
[105.06851196 407.44735718]
[105.88764954 422.42498779]
[114.36701965 435.78201294]
[107.33629608 448.91284180]
[108.15543365 463.89044189]
[115.05770874 479.37576294]
[102.08831024 490.29504395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[4 109]
[5 108]
[6 107]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[15 100]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[26 90]
[27 89]
[28 88]
[29 87]
[31 86]
[32 85]
[33 84]
[34 83]
[37 80]
[39 78]
[40 77]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% Start Annotations
14 34 8 RED omark 85 104 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
