%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCAAGAAGGGAGCUCCCUUCAGUCCAAGCAAAGAUUGCAUAGGGACGAAACUAUCUCCCGAAUCAUUCACUCAUCUGCUAAGCAUCUCUCGCUACUGAUUUUCACUUAGCAUUUGAAUGAAUGAGCCGGAAGCUAACUCAGCCCCUCUUUGCCACCCAUGAGUGGGCUGAAGGAAGCUCUCUUUUAUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[99.08526611 807.45172119]
[89.56464386 795.63134766]
[84.96068573 781.16870117]
[85.89602661 766.01977539]
[92.24418640 752.23333740]
[103.14661407 741.67395020]
[117.12885284 735.76959229]
[116.65052032 720.77722168]
[116.17218018 705.78485107]
[115.69384766 690.79248047]
[115.21551514 675.80010986]
[114.73718262 660.80773926]
[114.25885010 645.81536865]
[113.78050995 630.82299805]
[113.30217743 615.83062744]
[112.82384491 600.83825684]
[112.34551239 585.84588623]
[104.20628357 573.37182617]
[111.49958038 559.33190918]
[111.02124786 544.33953857]
[110.54290771 529.34716797]
[110.06457520 514.35479736]
[109.58624268 499.36242676]
[109.10791016 484.37005615]
[108.62957764 469.37768555]
[108.15123749 454.38531494]
[107.67290497 439.39294434]
[107.19457245 424.40057373]
[106.71623993 409.40820312]
[95.71177673 399.43637085]
[95.01310730 384.23876953]
[105.54709625 372.76391602]
[105.06876373 357.77154541]
[91.07064056 352.57711792]
[80.09798431 342.39154053]
[73.84402466 328.74407959]
[73.29008484 313.70144653]
[78.55170441 299.55474854]
[88.85626984 288.47058105]
[102.65634155 282.15917969]
[102.17800140 267.16680908]
[101.69966888 252.17443848]
[90.32203674 236.54823303]
[100.08063507 218.91792297]
[99.12445831 203.94842529]
[98.16827393 188.97892761]
[97.21209717 174.00942993]
[88.67922211 161.80126953]
[95.52108765 147.53594971]
[81.05725098 143.82806396]
[68.44596100 135.83390808]
[58.92057037 124.33530426]
[53.41263580 110.45677185]
[52.46081924 95.55559540]
[56.15820312 81.08906555]
[64.14319611 68.47197723]
[75.63488770 58.93824387]
[89.50941467 53.42023849]
[88.55323792 38.45074463]
[79.95197296 25.17185593]
[86.86222839 11.97725201]
[85.90605164 -2.99224114]
[84.94986725 -17.96173477]
[73.36779022 -28.37773895]
[72.61132812 -43.57255554]
[82.61277771 -54.55010986]
[81.65659332 -69.51959991]
[80.70040894 -84.48908997]
[79.74423218 -99.45858765]
[78.78804779 -114.42807770]
[77.83186340 -129.39756775]
[76.87568665 -144.36706543]
[68.27442169 -157.64595032]
[75.18468475 -170.84056091]
[74.22850037 -185.81004333]
[73.27231598 -200.77954102]
[61.69023895 -211.19554138]
[60.93378067 -226.39036560]
[70.93522644 -237.36791992]
[69.97904205 -252.33741760]
[69.02285767 -267.30691528]
[68.06668091 -282.27639771]
[67.11049652 -297.24588013]
[66.15431976 -312.21539307]
[65.19813538 -327.18487549]
[50.85821533 -332.14898682]
[39.54183578 -342.19799805]
[32.95275116 -355.77731323]
[32.06702805 -370.80404663]
[36.98854065 -384.98657227]
[46.93790817 -396.17385864]
[60.37574005 -402.68185425]
[59.41955948 -417.65133667]
[47.39051819 -427.90206909]
[46.21636963 -443.66268921]
[56.59371567 -455.58267212]
[72.36585999 -456.59011841]
[84.17547607 -446.08734131]
[85.01611328 -430.30541992]
[74.38905334 -418.60751343]
[75.34523010 -403.63803101]
[89.50187683 -398.89263916]
[100.79376984 -389.06213379]
[107.47974396 -375.62106323]
[108.51309204 -360.60375977]
[103.70527649 -346.29644775]
[93.75941467 -334.88931274]
[80.16762543 -328.14105225]
[81.12380981 -313.17156982]
[82.07999420 -298.20205688]
[83.03617096 -283.23257446]
[83.99235535 -268.26309204]
[84.94853210 -253.29359436]
[85.90471649 -238.32409668]
[97.22157288 -228.70825195]
[98.40451813 -213.54067993]
[88.24181366 -201.73571777]
[89.19799042 -186.76623535]
[90.15417480 -171.79673767]
[98.68704224 -159.58857727]
[91.84517670 -145.32324219]
[92.80136108 -130.35375977]
[93.75753784 -115.38426208]
[94.71372223 -100.41476440]
[95.66990662 -85.44527435]
[96.62608337 -70.47578430]
[97.58226776 -55.50629044]
[108.89912415 -45.89044952]
[110.08206940 -30.72287560]
[99.91936493 -18.91791534]
[100.87554169 -3.94842243]
[101.83172607 11.02107048]
[110.36459351 23.22924042]
[103.52272797 37.49456406]
[104.47891235 52.46405411]
[118.94274902 56.17193985]
[131.55403137 64.16608429]
[141.07943726 75.66469574]
[146.58737183 89.54322815]
[147.53918457 104.44440460]
[143.84179688 118.91093445]
[135.85681152 131.52801514]
[124.36511230 141.06175232]
[110.49058533 146.57975769]
[119.09184265 159.85865784]
[112.18158722 173.05325317]
[113.13777161 188.02275085]
[114.09394836 202.99224854]
[115.05013275 217.96173096]
[123.62831879 224.67294312]
[127.02082062 234.79116821]
[124.33457184 244.89218140]
[116.69203949 251.69610596]
[117.17037201 266.68847656]
[117.64871216 281.68084717]
[131.82304382 287.09973145]
[142.81320190 297.50448608]
[148.96591187 311.28701782]
[149.37199402 326.33435059]
[144.00071716 340.35269165]
[133.69966125 351.21704102]
[120.06113434 357.29318237]
[120.53946686 372.28555298]
[131.78350830 383.06561279]
[132.05502319 398.27682495]
[121.70861053 408.92987061]
[122.18694305 423.92224121]
[122.66527557 438.91461182]
[123.14361572 453.90698242]
[123.62194824 468.89935303]
[124.10028076 483.89172363]
[124.57861328 498.88409424]
[125.05694580 513.87646484]
[125.53527832 528.86883545]
[126.01361847 543.86120605]
[126.49195099 558.85357666]
[134.66539001 572.39996338]
[127.33788300 585.36755371]
[127.81621552 600.35992432]
[128.29455566 615.35229492]
[128.77288818 630.34466553]
[129.25122070 645.33703613]
[129.72955322 660.32940674]
[130.20788574 675.32177734]
[130.68621826 690.31414795]
[131.16455078 705.30651855]
[131.64288330 720.29888916]
[132.12121582 735.29125977]
[146.45140076 740.29229736]
[158.00477600 750.13525391]
[165.21884155 763.48895264]
[167.11795044 778.54742432]
[163.44528198 793.27416992]
[154.69752502 805.67742920]
[142.05772400 814.07983398]
[127.23534393 817.34497070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 188]
[8 187]
[9 186]
[10 185]
[11 184]
[12 183]
[13 182]
[14 181]
[15 180]
[16 179]
[17 178]
[19 176]
[20 175]
[21 174]
[22 173]
[23 172]
[24 171]
[25 170]
[26 169]
[27 168]
[28 167]
[29 166]
[32 163]
[33 162]
[40 155]
[41 154]
[42 153]
[44 149]
[45 148]
[46 147]
[47 146]
[49 144]
[58 135]
[59 134]
[61 132]
[62 131]
[63 130]
[66 127]
[67 126]
[68 125]
[69 124]
[70 123]
[71 122]
[72 121]
[74 119]
[75 118]
[76 117]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[92 101]
[93 100]
] def

init

% Start Annotations
11 29 8 RED omark 168 186 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
