%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUAAUUUCCCACAGCUUUAUUGAACUGCAAACCUAACCCUAAUUUUCCUUUUCCCGAAGGAGGAAUGCAGUUCAAGAAAGCUGUGGAAGACUACAAGAA\
) } def
/len { sequence length } bind def

/coor [
[89.19389343 414.24392700]
[84.01874542 399.61526489]
[88.46273804 384.74816895]
[100.81705475 375.35934448]
[100.36401367 360.36618042]
[99.91096497 345.37301636]
[99.45792389 330.37985229]
[91.33975220 317.89208984]
[98.65671539 303.86453247]
[98.20366669 288.87136841]
[97.75062561 273.87820435]
[89.63244629 261.39044189]
[96.94940948 247.36286926]
[96.49636841 232.36970520]
[96.04331970 217.37655640]
[95.59027863 202.38339233]
[95.13722992 187.39024353]
[94.68418884 172.39707947]
[94.23114014 157.40393066]
[93.77809143 142.41076660]
[93.32505035 127.41761017]
[92.87200165 112.42445374]
[85.68258667 100.43262482]
[92.13484192 88.02858734]
[91.68179321 73.03543091]
[91.22874451 58.04227829]
[90.77570343 43.04912186]
[90.32265472 28.05596352]
[89.86961365 13.06280708]
[89.41656494 -1.93034983]
[88.96352386 -16.92350578]
[88.51047516 -31.91666412]
[88.05742645 -46.90982056]
[76.83159637 -57.70881653]
[76.58572388 -72.92046356]
[86.95009613 -83.55603027]
[86.49705505 -98.54918671]
[77.19184113 -86.78428650]
[63.78029633 -80.06636047]
[48.78581619 -79.65940094]
[35.02962875 -85.63997650]
[25.09996605 -96.88283539]
[20.86510849 -111.27262115]
[23.12184525 -126.10188293]
[31.44556999 -138.58049011]
[44.27016449 -146.36058044]
[59.18267441 -147.97831726]
[73.37729645 -143.12931824]
[84.18329620 -132.72593689]
[89.56768036 -118.72451019]
[94.46072388 -132.90400696]
[99.35376740 -147.08349609]
[104.24680328 -161.26300049]
[109.13984680 -175.44250488]
[114.03289032 -189.62199402]
[110.38507843 -205.61029053]
[122.58982086 -216.56364441]
[138.09193420 -211.21420288]
[140.94416809 -195.06500244]
[128.21238708 -184.72895813]
[123.31934357 -170.54945374]
[118.42630005 -156.36996460]
[113.53326416 -142.19046021]
[108.64022064 -128.01097107]
[103.74717712 -113.83146667]
[101.49021149 -99.00223541]
[101.94325256 -84.00907898]
[112.93087769 -74.01869965]
[113.60391235 -58.81996155]
[103.05059052 -47.36286545]
[103.50363159 -32.36970901]
[103.95668030 -17.37655258]
[104.40972137 -2.38339520]
[104.86277008 12.60976124]
[105.31581116 27.60291862]
[105.76885986 42.59607315]
[106.22190857 57.58923340]
[106.67494965 72.58238983]
[107.12799835 87.57554626]
[114.31741333 99.56737518]
[107.86515808 111.97141266]
[108.31820679 126.96456909]
[108.77125549 141.95771790]
[109.22429657 156.95088196]
[109.67734528 171.94403076]
[110.13038635 186.93719482]
[110.58343506 201.93034363]
[111.03647614 216.92350769]
[111.48952484 231.91665649]
[111.94257355 246.90982056]
[120.09314728 260.47000122]
[112.74378204 273.42517090]
[113.19682312 288.41830444]
[113.64987183 303.41146851]
[121.80044556 316.97164917]
[114.45108032 329.92681885]
[114.90412140 344.91998291]
[115.35717010 359.91311646]
[115.81021881 374.90628052]
[128.70887756 383.53207397]
[134.04241943 398.10369873]
[129.75996399 413.01815796]
[117.50822449 422.54046631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[9 94]
[10 93]
[11 92]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[36 67]
[37 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% Start Annotations
70 87 8 RED omark 18 35 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
