%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUGCUGGUGUAGCAUCAUCAAGAUUCACAAACUUUUCCGAUGGUUUAUUCUUUCUUUGUUCCUGUACUGGGAUUGAGAAUCUUGAUGAUGCUGCAUCGGCAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[105.21824646 540.94750977]
[95.14140320 529.26586914]
[93.00241852 513.98748779]
[99.48384094 499.98767090]
[112.51747131 491.73370361]
[112.51747131 476.73370361]
[112.51747131 461.73370361]
[112.51747131 446.73370361]
[112.51747131 431.73370361]
[112.51747131 416.73370361]
[112.51747131 401.73370361]
[112.51747131 386.73370361]
[112.51747131 371.73370361]
[112.51747131 356.73370361]
[112.51747131 341.73370361]
[112.51747131 326.73370361]
[112.51747131 311.73370361]
[112.51747131 296.73370361]
[112.51747131 281.73370361]
[112.51747131 266.73370361]
[112.51747131 251.73370361]
[112.51747131 236.73370361]
[112.51747131 221.73370361]
[112.51747131 206.73370361]
[112.51747131 191.73370361]
[112.51747131 176.73370361]
[112.51747131 161.73370361]
[112.51747131 146.73370361]
[112.51747131 131.73370361]
[112.51747131 116.73369598]
[96.04652405 119.20957947]
[84.11930847 109.14767456]
[83.83752441 94.59698486]
[73.15614319 84.06569672]
[62.47475815 73.53440857]
[51.79337311 63.00312042]
[41.11198807 52.47183228]
[25.82609749 55.14038086]
[11.90586281 48.28423691]
[4.70389891 34.53973389]
[6.98950863 19.19191360]
[17.88382721 8.14232445]
[33.19776917 5.63975906]
[47.04280853 12.64650536]
[54.09524918 26.46832657]
[51.64327621 41.79045105]
[62.32466125 52.32173920]
[73.00605011 62.85302734]
[83.68743134 73.38431549]
[94.36881256 83.91560364]
[103.58932495 82.02799988]
[113.09358215 85.39876556]
[119.92736816 93.70684052]
[128.67530823 81.52187347]
[126.31812286 66.12442780]
[135.36335754 53.89175415]
[150.05700684 51.73942566]
[158.80494690 39.55445480]
[167.55290222 27.36948776]
[176.30084229 15.18452072]
[178.06379700 -0.53815544]
[191.77156067 -6.36454964]
[200.51950073 -18.54951668]
[197.71185303 -34.10241699]
[206.79260254 -47.03746414]
[222.37431335 -49.68052292]
[235.21263123 -40.46352005]
[237.69081116 -24.85473442]
[228.33857727 -12.11458302]
[212.70446777 -9.80157185]
[203.95652771 2.38339615]
[202.81927490 17.23452187]
[188.48580933 23.93246651]
[179.73786926 36.11743546]
[170.98991394 48.30240250]
[162.24197388 60.48736954]
[164.90113831 75.09779358]
[156.20306396 87.57969666]
[140.86027527 90.26982117]
[132.11233521 102.45478821]
[127.51747131 116.73369598]
[127.51747131 131.73370361]
[127.51747131 146.73370361]
[127.51747131 161.73370361]
[127.51747131 176.73370361]
[127.51747131 191.73370361]
[127.51747131 206.73370361]
[127.51747131 221.73370361]
[127.51747131 236.73370361]
[127.51747131 251.73370361]
[127.51747131 266.73370361]
[127.51747131 281.73370361]
[127.51747131 296.73370361]
[127.51747131 311.73370361]
[127.51747131 326.73370361]
[127.51747131 341.73370361]
[127.51747131 356.73370361]
[127.51747131 371.73370361]
[127.51747131 386.73370361]
[127.51747131 401.73370361]
[127.51747131 416.73370361]
[127.51747131 431.73370361]
[127.51747131 446.73370361]
[127.51747131 461.73370361]
[127.51747131 476.73370361]
[127.51747131 491.73370361]
[140.55110168 499.98767090]
[147.03253174 513.98748779]
[144.89353943 529.26586914]
[134.81669617 540.94750977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[53 80]
[54 79]
[57 76]
[58 75]
[59 74]
[60 73]
[62 71]
[63 70]
] def

init

% Start Annotations
6 27 8 RED omark 86 107 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
