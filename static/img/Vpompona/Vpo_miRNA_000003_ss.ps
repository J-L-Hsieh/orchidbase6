%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGACCUCGAGUUCCCUCAACCACUUCACGACGACAAUGUGCUUGCAGAGCUCGAGCAACCAAAUUAUAGCUCCUCCUGAAGUGUUUGGGGGAACUCCGGGUGCCAC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 585.94689941]
[92.50000000 570.94689941]
[92.50000000 555.94689941]
[81.81912994 545.62921143]
[81.60544586 530.41711426]
[92.50000000 519.28393555]
[92.50000000 504.28396606]
[92.50000000 489.28396606]
[92.50000000 474.28396606]
[84.76270294 461.55670166]
[92.50000000 447.75653076]
[92.50000000 432.75653076]
[92.50000000 417.75653076]
[92.50000000 402.75653076]
[92.50000000 387.75653076]
[92.50000000 372.75653076]
[92.50000000 357.75653076]
[92.50000000 342.75653076]
[92.50000000 327.75653076]
[92.50000000 312.75653076]
[92.50000000 297.75653076]
[92.50000000 282.75653076]
[84.76270294 270.02923584]
[92.50000000 256.22906494]
[92.50000000 241.22906494]
[92.50000000 226.22906494]
[92.50000000 211.22906494]
[92.50000000 196.22906494]
[92.50000000 181.22906494]
[92.50000000 166.22906494]
[84.76270294 153.50180054]
[92.50000000 139.70162964]
[92.50000000 124.70162964]
[85.38397217 122.37007904]
[79.01337433 117.96891785]
[73.99334717 111.74266052]
[70.84730530 104.11289215]
[69.96531677 95.65070343]
[71.56178284 87.03414154]
[75.64677429 78.99389648]
[82.01415253 72.25149536]
[69.51514435 62.55173111]
[71.68781281 47.81644058]
[65.84875488 33.99958420]
[60.00970459 20.18272972]
[54.17065430 6.36587477]
[42.43552780 -5.87026548]
[50.94486618 -20.53408051]
[67.39123535 -16.41663551]
[67.98751068 0.52682322]
[73.82656097 14.34367847]
[79.66561127 28.16053200]
[85.50466156 41.97738647]
[97.58602142 50.68888092]
[95.83100128 66.41244507]
[110.75612640 67.90934753]
[119.22277832 55.52726746]
[127.68942261 43.14518738]
[136.15606689 30.76310921]
[128.49789429 17.56027031]
[127.33516693 2.34150386]
[132.89875793 -11.87149048]
[144.08401489 -22.25671196]
[158.67008972 -26.75217056]
[173.76091003 -24.46528625]
[186.36018372 -15.85012245]
[193.96630859 -2.61722732]
[195.06910706 12.60599899]
[189.44958496 26.79697418]
[178.22351074 37.13806915]
[163.61985779 41.57604980]
[148.53814697 39.22975922]
[140.07150269 51.61183548]
[131.60485840 63.99391556]
[123.13820648 76.37599182]
[128.59672546 107.00160980]
[107.50000000 124.70162964]
[107.50000000 139.70162964]
[115.23729706 153.50180054]
[107.50000000 166.22906494]
[107.50000000 181.22906494]
[107.50000000 196.22906494]
[107.50000000 211.22906494]
[107.50000000 226.22906494]
[107.50000000 241.22906494]
[107.50000000 256.22906494]
[115.23729706 270.02923584]
[107.50000000 282.75653076]
[107.50000000 297.75653076]
[107.50000000 312.75653076]
[107.50000000 327.75653076]
[107.50000000 342.75653076]
[107.50000000 357.75653076]
[107.50000000 372.75653076]
[107.50000000 387.75653076]
[107.50000000 402.75653076]
[107.50000000 417.75653076]
[107.50000000 432.75653076]
[107.50000000 447.75653076]
[115.23729706 461.55670166]
[107.50000000 474.28396606]
[107.50000000 489.28396606]
[107.50000000 504.28396606]
[107.50000000 519.28393555]
[118.39455414 530.41711426]
[118.18087006 545.62921143]
[107.50000000 555.94689941]
[107.50000000 570.94689941]
[107.50000000 585.94689941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[6 104]
[7 103]
[8 102]
[9 101]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[32 78]
[33 77]
[41 55]
[43 53]
[44 52]
[45 51]
[46 50]
[56 75]
[57 74]
[58 73]
[59 72]
] def

init

% Start Annotations
13 33 8 RED omark 79 99 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
