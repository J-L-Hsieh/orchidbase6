%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAGGGGAAUGCCGUCUGGUUCGAGGCCUGACAUGGAGAUGAAUGGAAGAGAGCUCUCCAAGCUUGCUUCAGUAGUGUCUUCAAUGAUGUGAAUGGUUUCGGACCAGGCUUCAUUCCCCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 542.76123047]
[82.21823120 527.07373047]
[92.50000000 514.75848389]
[92.50000000 499.75851440]
[84.76270294 487.03121948]
[92.50000000 473.23104858]
[92.50000000 458.23104858]
[92.50000000 443.23104858]
[92.50000000 428.23104858]
[92.50000000 413.23104858]
[92.50000000 398.23104858]
[92.50000000 383.23104858]
[92.50000000 368.23104858]
[81.81912994 357.91336060]
[81.60544586 342.70123291]
[92.50000000 331.56811523]
[92.50000000 316.56811523]
[92.50000000 301.56811523]
[92.50000000 286.56811523]
[92.50000000 271.56811523]
[92.50000000 256.56811523]
[92.50000000 241.56811523]
[92.50000000 226.56811523]
[92.50000000 211.56811523]
[92.50000000 196.56811523]
[92.50000000 181.56811523]
[92.50000000 166.56811523]
[92.50000000 151.56811523]
[92.50000000 136.56811523]
[92.50000000 121.56811523]
[79.22994232 109.48886108]
[78.78610229 91.54991150]
[91.44255066 78.82917786]
[90.70074463 63.84753036]
[89.95893860 48.86588669]
[88.47714233 33.93925476]
[86.25898743 19.10416985]
[84.04082489 4.26908398]
[81.82266235 -10.56600189]
[79.60449982 -25.40108681]
[77.38634491 -40.23617172]
[75.16818237 -55.07125854]
[72.95001984 -69.90634155]
[57.54556656 -75.77202606]
[47.23552322 -88.51299286]
[44.74084854 -104.61730957]
[50.64470673 -119.70629883]
[63.25959778 -129.72506714]
[60.67517853 -144.50074768]
[58.09075928 -159.27642822]
[55.50634003 -174.05212402]
[45.50705338 -186.31282043]
[50.93580246 -200.18286133]
[48.35138321 -214.95854187]
[45.76696396 -229.73422241]
[43.18254471 -244.50990295]
[40.59812546 -259.28558350]
[28.34827042 -269.64514160]
[28.95405006 -285.67675781]
[41.95076752 -295.08233643]
[57.36845016 -290.64672852]
[63.37997055 -275.77255249]
[55.37380981 -261.86999512]
[57.95822906 -247.09431458]
[60.54264832 -232.31863403]
[63.12706757 -217.54295349]
[65.71148682 -202.76727295]
[75.52591705 -191.56343079]
[70.28202057 -176.63653564]
[72.86643982 -161.86085510]
[75.45085907 -147.08517456]
[78.03527832 -132.30949402]
[91.19555664 -128.45039368]
[101.44296265 -119.23620605]
[106.72447205 -106.43580627]
[105.94864655 -92.54389191]
[99.21073151 -80.29483795]
[87.78511047 -72.12450409]
[90.00326538 -57.28941727]
[92.22142792 -42.45433426]
[94.43959045 -27.61924744]
[96.65775299 -12.78416252]
[98.87590790 2.05092359]
[101.09407043 16.88600922]
[103.31223297 31.72109413]
[105.60279083 33.50975037]
[107.28228760 36.36222458]
[107.92286682 40.03493881]
[107.19886780 44.12728500]
[104.94058990 48.12408066]
[105.68239594 63.10572433]
[106.42420197 78.08737183]
[116.21335602 83.92017365]
[121.96500397 93.75723267]
[122.24685669 105.14888000]
[116.98872375 115.25833893]
[107.50000000 121.56811523]
[107.50000000 136.56811523]
[107.50000000 151.56811523]
[107.50000000 166.56811523]
[107.50000000 181.56811523]
[107.50000000 196.56811523]
[107.50000000 211.56811523]
[107.50000000 226.56811523]
[107.50000000 241.56811523]
[107.50000000 256.56811523]
[107.50000000 271.56811523]
[107.50000000 286.56811523]
[107.50000000 301.56811523]
[107.50000000 316.56811523]
[107.50000000 331.56811523]
[118.39455414 342.70123291]
[118.18087006 357.91336060]
[107.50000000 368.23104858]
[107.50000000 383.23104858]
[107.50000000 398.23104858]
[107.50000000 413.23104858]
[107.50000000 428.23104858]
[107.50000000 443.23104858]
[107.50000000 458.23104858]
[107.50000000 473.23104858]
[115.23729706 487.03121948]
[107.50000000 499.75851440]
[107.50000000 514.75848389]
[117.78176880 527.07373047]
[114.42288971 542.76123047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[33 92]
[34 91]
[35 90]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[48 72]
[49 71]
[50 70]
[51 69]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% Start Annotations
8 28 8 RED omark 101 121 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
