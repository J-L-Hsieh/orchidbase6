%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCACCUCGAGUUCCCUCGGGCACUUCACGACGACCAUCUGGUUGCAGAGCUCGAACAACCAAAGUACAGCUCCUCCUGAAGUGUUUGGGGGAACUCCGGGUGCCAC\
) } def
/len { sequence length } bind def

/coor [
[90.41858673 579.16107178]
[90.41858673 564.16107178]
[90.41858673 549.16107178]
[82.68128967 536.43377686]
[90.41858673 522.63360596]
[90.41858673 507.63360596]
[90.41858673 492.63360596]
[90.41858673 477.63360596]
[90.41858673 462.63360596]
[82.68128967 449.90634155]
[90.41858673 436.10617065]
[90.41858673 421.10617065]
[90.41858673 406.10617065]
[90.41858673 391.10617065]
[90.41858673 376.10617065]
[90.41858673 361.10617065]
[90.41858673 346.10617065]
[90.41858673 331.10617065]
[90.41858673 316.10617065]
[90.41858673 301.10617065]
[90.41858673 286.10617065]
[90.41858673 271.10617065]
[90.41858673 256.10617065]
[90.41858673 241.10617065]
[90.41858673 226.10617065]
[90.41858673 211.10617065]
[90.41858673 196.10617065]
[90.41858673 181.10617065]
[90.41858673 166.10617065]
[90.41858673 151.10617065]
[82.68128967 138.37890625]
[90.41858673 124.57872772]
[90.41858673 109.57872772]
[84.38283539 95.84666443]
[73.33171844 85.70404053]
[62.28060150 75.56141663]
[51.22948456 65.41879272]
[40.17836761 55.27616882]
[24.06195068 52.24414825]
[18.88559151 36.68338776]
[29.97428322 24.60145950]
[45.92093277 28.42721939]
[50.32099152 44.22505188]
[61.37210846 54.36767578]
[72.42322540 64.51029968]
[83.47434235 74.65292358]
[94.52545929 84.79554749]
[101.87607574 83.30611420]
[116.57731628 80.32726288]
[123.92794037 78.83782959]
[130.15916443 65.19335175]
[136.39038086 51.54887390]
[142.62161255 37.90439224]
[148.85284424 24.25991249]
[149.59909058 15.00229073]
[155.46176147 10.31871128]
[154.60725403 -5.47940207]
[167.16622925 -13.48697567]
[173.78454590 -26.94795227]
[167.30444336 -41.17968369]
[171.53814697 -56.23324203]
[184.48666382 -65.00080109]
[200.03608704 -63.34258652]
[210.84443665 -52.04155350]
[211.80838013 -36.43370819]
[202.47273254 -23.88859558]
[187.24552917 -20.32963562]
[180.62721252 -6.86865950]
[181.95510864 7.96663475]
[168.92274475 16.93702698]
[162.49731445 30.49113846]
[156.26609802 44.13561630]
[150.03486633 57.78009796]
[143.80363464 71.42457581]
[137.57241821 85.06905365]
[124.25527191 108.54904938]
[105.41858673 109.57872772]
[105.41858673 124.57872772]
[113.15589142 138.37890625]
[105.41858673 151.10617065]
[105.41858673 166.10617065]
[105.41858673 181.10617065]
[105.41858673 196.10617065]
[105.41858673 211.10617065]
[105.41858673 226.10617065]
[105.41858673 241.10617065]
[105.41858673 256.10617065]
[105.41858673 271.10617065]
[105.41858673 286.10617065]
[105.41858673 301.10617065]
[105.41858673 316.10617065]
[105.41858673 331.10617065]
[105.41858673 346.10617065]
[105.41858673 361.10617065]
[105.41858673 376.10617065]
[105.41858673 391.10617065]
[105.41858673 406.10617065]
[105.41858673 421.10617065]
[105.41858673 436.10617065]
[113.15589142 449.90634155]
[105.41858673 462.63360596]
[105.41858673 477.63360596]
[105.41858673 492.63360596]
[105.41858673 507.63360596]
[105.41858673 522.63360596]
[113.15589142 536.43377686]
[105.41858673 549.16107178]
[105.41858673 564.16107178]
[105.41858673 579.16107178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[32 78]
[33 77]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 70]
[58 68]
[59 67]
] def

init

% Start Annotations
80 99 8 RED omark 13 32 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
