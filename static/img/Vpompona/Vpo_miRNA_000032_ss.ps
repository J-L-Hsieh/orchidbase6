%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGAAGCAUACAUGAGUGAUAUUGGUUCGGCUCGCCCCUUGUACUUGAUAUCAAAGAGAUAAAGGUGAGCUGAACCAAUACCAUCAUGUCUUCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[96.98236847 288.23590088]
[95.59834290 273.29986572]
[94.21431732 258.36386108]
[90.39686584 251.88201904]
[93.02492523 242.94769287]
[92.10150909 227.97615051]
[91.17809296 213.00459290]
[90.25468445 198.03305054]
[87.69865417 195.36886597]
[86.39936829 191.26663208]
[87.04962158 186.37719727]
[90.00235748 181.64949036]
[90.46427917 166.65660095]
[90.92620850 151.66371155]
[91.38813019 136.67083740]
[91.85005951 121.67794800]
[92.31198120 106.68505859]
[89.35191345 99.02445221]
[93.02606964 91.23957825]
[93.94948578 76.26802826]
[87.07640839 62.01771545]
[95.58254242 49.79089737]
[96.50595093 34.81934738]
[97.42936707 19.84779739]
[98.35278320 4.87624645]
[99.27619171 -10.09530354]
[100.19960785 -25.06685257]
[101.12302399 -40.03840256]
[102.04643250 -55.00995255]
[102.96984863 -69.98150635]
[103.89326477 -84.95305634]
[104.81667328 -99.92460632]
[105.74008942 -114.89615631]
[106.66350555 -129.86770630]
[107.58691406 -144.83924866]
[108.51033020 -159.81080627]
[109.43374634 -174.78234863]
[110.35715485 -189.75390625]
[102.36482239 -200.02148438]
[103.54720306 -212.57429504]
[112.71148682 -220.63549805]
[114.09551239 -235.57151794]
[115.47953796 -250.50753784]
[116.86356354 -265.44354248]
[108.75009918 -281.88363647]
[119.23854065 -295.86019897]
[120.16194916 -310.83175659]
[121.08536530 -325.80331421]
[109.62393951 -336.44143677]
[107.73333740 -351.96429443]
[116.30624390 -365.04251099]
[131.29479980 -369.50088501]
[145.62185669 -363.23437500]
[152.52262878 -349.20178223]
[148.73876953 -334.02890015]
[136.05691528 -324.87988281]
[135.13349915 -309.90832520]
[134.21008301 -294.93679810]
[142.02938843 -285.56524658]
[141.27227783 -272.97961426]
[131.79957581 -264.05950928]
[130.41554260 -249.12350464]
[129.03152466 -234.18750000]
[127.64749908 -219.25148010]
[135.86791992 -203.83146667]
[125.32870483 -188.83049011]
[124.40529633 -173.85893250]
[123.48188019 -158.88739014]
[122.55846405 -143.91583252]
[121.63505554 -128.94429016]
[120.71163940 -113.97274017]
[119.78822327 -99.00119019]
[118.86481476 -84.02964020]
[117.94139862 -69.05809021]
[117.01798248 -54.08654022]
[116.09457397 -39.11499023]
[115.17115784 -24.14344025]
[114.24774170 -9.17189026]
[113.32433319 5.79966021]
[112.40091705 20.77120972]
[111.47750092 35.74275970]
[110.55409241 50.71430969]
[117.49320984 63.89375687]
[108.92103577 77.19143677]
[107.99761963 92.16298676]
[107.30487061 107.14698792]
[106.84294128 122.13986969]
[106.38101959 137.13275146]
[105.91909027 152.12564087]
[105.45716858 167.11853027]
[104.99523926 182.11141968]
[105.22623444 197.10963440]
[106.14964294 212.08119202]
[107.07305908 227.05273438]
[107.99647522 242.02429199]
[109.15032959 256.97982788]
[110.53435516 271.91586304]
[111.91838074 286.85186768]
[121.82984924 299.91690063]
[115.22240448 314.92599487]
[98.89321136 316.43911743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[5 95]
[6 94]
[7 93]
[8 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[19 85]
[20 84]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[44 61]
[46 58]
[47 57]
[48 56]
] def

init

% Start Annotations
11 36 8 RED omark 70 94 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
