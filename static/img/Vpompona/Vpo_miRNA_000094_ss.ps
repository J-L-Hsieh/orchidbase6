%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCGAGAUGGAGAAGCAGGGCACGUGCAUUGCUAUCUAGAAACCACAUACAUGGCCUUCUUGAUUCCUUUAUUUGAAGAUUUAGAUAGCUUUUCAUGUGCCCUUCUUCUCCAUCAUACCCAU\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 727.89288330]
[92.50000000 712.05371094]
[92.50000000 697.05371094]
[92.50000000 682.05371094]
[92.50000000 667.05371094]
[84.76270294 654.32647705]
[92.50000000 640.52630615]
[84.76270294 627.79901123]
[92.50000000 613.99884033]
[92.50000000 598.99884033]
[92.50000000 583.99884033]
[92.50000000 568.99884033]
[92.50000000 553.99884033]
[92.50000000 538.99884033]
[92.50000000 523.99884033]
[92.50000000 508.99884033]
[92.50000000 493.99884033]
[92.50000000 478.99884033]
[84.76270294 466.27157593]
[92.50000000 452.47140503]
[92.50000000 437.47140503]
[92.50000000 422.47140503]
[92.50000000 407.47140503]
[92.50000000 392.47140503]
[92.50000000 377.47140503]
[92.50000000 362.47140503]
[92.50000000 347.47140503]
[92.50000000 332.47140503]
[92.50000000 317.47140503]
[84.76270294 304.74414062]
[92.50000000 290.94396973]
[81.81912994 280.62628174]
[81.60544586 265.41415405]
[92.50000000 254.28102112]
[92.50000000 239.28102112]
[92.50000000 224.28102112]
[92.50000000 209.28102112]
[92.50000000 194.28102112]
[92.50000000 179.28102112]
[92.50000000 164.28102112]
[92.50000000 149.28102112]
[92.50000000 134.28102112]
[92.50000000 119.28102112]
[82.82183838 111.52902222]
[79.31486511 99.63526917]
[83.23896027 87.87254333]
[75.10076904 75.27214813]
[66.96257019 62.67176437]
[51.46110916 59.59277725]
[42.74666595 46.40816116]
[45.98937225 30.94011688]
[59.26538467 22.36555862]
[74.69828033 25.77161980]
[83.13199615 39.13754654]
[79.56295776 54.53356934]
[87.70115662 67.13395691]
[95.83934784 79.73434448]
[97.68363953 79.44173431]
[99.54680634 79.31661987]
[104.67710114 65.22122955]
[109.80740356 51.12583923]
[114.93770599 37.03044891]
[110.19155121 24.96023750]
[114.83647919 13.28262043]
[125.84857941 8.11289310]
[131.32868958 -5.85021305]
[136.80880737 -19.81331825]
[130.25987244 -34.19688416]
[135.87796021 -48.96890640]
[150.32997131 -55.36540604]
[165.04176331 -49.59144974]
[171.28511047 -35.07262802]
[165.35594177 -20.42269707]
[150.77191162 -14.33320332]
[145.29180908 -0.37009746]
[139.81169128 13.59300900]
[143.39950562 30.72336388]
[129.03309631 42.16075134]
[123.90279388 56.25614166]
[118.77249146 70.35153198]
[113.64218903 84.44692230]
[120.37404633 103.59249115]
[107.50000000 119.28102112]
[107.50000000 134.28102112]
[107.50000000 149.28102112]
[107.50000000 164.28102112]
[107.50000000 179.28102112]
[107.50000000 194.28102112]
[107.50000000 209.28102112]
[107.50000000 224.28102112]
[107.50000000 239.28102112]
[107.50000000 254.28102112]
[118.39455414 265.41415405]
[118.18087006 280.62628174]
[107.50000000 290.94396973]
[115.23729706 304.74414062]
[107.50000000 317.47140503]
[107.50000000 332.47140503]
[107.50000000 347.47140503]
[107.50000000 362.47140503]
[107.50000000 377.47140503]
[107.50000000 392.47140503]
[107.50000000 407.47140503]
[107.50000000 422.47140503]
[107.50000000 437.47140503]
[107.50000000 452.47140503]
[115.23729706 466.27157593]
[107.50000000 478.99884033]
[107.50000000 493.99884033]
[107.50000000 508.99884033]
[107.50000000 523.99884033]
[107.50000000 538.99884033]
[107.50000000 553.99884033]
[107.50000000 568.99884033]
[107.50000000 583.99884033]
[107.50000000 598.99884033]
[107.50000000 613.99884033]
[115.23729706 627.79901123]
[107.50000000 640.52630615]
[115.23729706 654.32647705]
[107.50000000 667.05371094]
[107.50000000 682.05371094]
[107.50000000 697.05371094]
[107.50000000 712.05371094]
[113.54634094 727.89288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[7 119]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[31 95]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[46 57]
[47 56]
[48 55]
[59 81]
[60 80]
[61 79]
[62 78]
[65 76]
[66 75]
[67 74]
] def

init

% Start Annotations
11 29 8 RED omark 99 117 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
