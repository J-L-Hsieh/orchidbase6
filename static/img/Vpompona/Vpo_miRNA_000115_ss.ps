%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUCGAGCUCUCGAAUUCGCUUGGUGCAGGUCGGGAAGCGAUAUGGGAUGAACUUCCGAUCGUUUGAUUGUUGAUUCCCUACUUGCAUCAAGUGAAUUCGAGAAAACCGGCGAAA\
) } def
/len { sequence length } bind def

/coor [
[111.07678223 668.37255859]
[119.36675262 654.22302246]
[118.96744537 639.22839355]
[118.56813812 624.23370361]
[118.16883087 609.23901367]
[117.76952362 594.24432373]
[117.37021637 579.24963379]
[103.58158112 570.45080566]
[97.65191650 555.02935791]
[102.08140564 538.94036865]
[115.32862091 528.52246094]
[114.53028870 513.54370117]
[113.73195648 498.56497192]
[112.93362427 483.58624268]
[112.13529205 468.60751343]
[111.33695984 453.62875366]
[110.53862762 438.65002441]
[109.74029541 423.67129517]
[108.94196320 408.69253540]
[108.14363098 393.71380615]
[107.34529877 378.73507690]
[106.54696655 363.75631714]
[105.74863434 348.77758789]
[104.95030212 333.79882812]
[104.15196991 318.82009888]
[103.35363007 303.84136963]
[102.55529785 288.86260986]
[101.75696564 273.88388062]
[100.95863342 258.90515137]
[100.16030121 243.92640686]
[99.36196899 228.94766235]
[98.56363678 213.96891785]
[97.76530457 198.99017334]
[89.36159515 186.69273376]
[96.35345459 172.50033569]
[95.55512238 157.52159119]
[94.75679016 142.54284668]
[93.95845795 127.56410980]
[93.16012573 112.58537292]
[85.69635773 100.76235199]
[91.86112976 88.21295929]
[91.06279755 73.23422241]
[90.26446533 58.25548172]
[89.46613312 43.27674103]
[88.66780090 28.29800034]
[87.67015076 13.33121490]
[78.85645294 0.19236653]
[85.55362701 -13.11166000]
[84.35684204 -28.06384087]
[83.16004944 -43.01602173]
[81.96325684 -57.96820068]
[80.76646423 -72.92037964]
[79.56967163 -87.87255859]
[66.25869751 -95.84737396]
[60.20835876 -110.13628387]
[63.74513245 -125.24491882]
[75.50905609 -135.36369324]
[90.97666168 -136.60174561]
[104.20034027 -128.48300171]
[110.09532166 -114.12930298]
[106.39485168 -99.05992126]
[94.52185059 -89.06935120]
[95.71864319 -74.11717224]
[96.91543579 -59.16499329]
[98.11222839 -44.21281052]
[99.30902100 -29.26063156]
[100.50581360 -14.30845165]
[109.23390198 -2.23908329]
[102.62232971 12.13442326]
[106.34014130 18.63392067]
[103.64654541 27.49966812]
[104.44487762 42.47840881]
[105.24320984 57.45714951]
[106.04154205 72.43589020]
[106.83987427 87.41462708]
[114.30364227 99.23764801]
[108.13887024 111.78704071]
[108.93720245 126.76577759]
[109.73553467 141.74452209]
[110.53386688 156.72325134]
[111.33219910 171.70199585]
[119.79300690 185.07081604]
[112.74404907 198.19184875]
[113.54238129 213.17059326]
[114.34071350 228.14932251]
[115.13904572 243.12806702]
[115.93737793 258.10681152]
[116.73571014 273.08554077]
[117.53404236 288.06430054]
[118.33237457 303.04302979]
[119.13070679 318.02175903]
[119.92903900 333.00051880]
[120.72737122 347.97924805]
[121.52570343 362.95797729]
[122.32403564 377.93673706]
[123.12236786 392.91546631]
[123.92070007 407.89422607]
[124.71903229 422.87295532]
[125.51736450 437.85168457]
[126.31569672 452.83044434]
[127.11403656 467.80917358]
[127.91236877 482.78790283]
[128.71069336 497.76666260]
[129.50903320 512.74542236]
[130.30735779 527.72412109]
[142.45704651 534.38568115]
[149.64302063 546.10546875]
[150.06297302 559.73773193]
[143.71398926 571.68566895]
[132.36489868 578.85034180]
[132.76420593 593.84503174]
[133.16351318 608.83972168]
[133.56282043 623.83435059]
[133.96212769 638.82904053]
[134.36143494 653.82373047]
[143.39273071 667.51196289]
[135.81303406 682.05432129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 110]
[11 105]
[12 104]
[13 103]
[14 102]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% Start Annotations
11 39 8 RED omark 79 107 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
