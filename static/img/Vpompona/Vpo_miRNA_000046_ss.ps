%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGGUGAGUGAUUGAAGCUGCAAGAUGAUCUGGACAACCCAAAAUGGAUGACUACUAAGCUUAAGAAAAAGCCUGCCCAACCAAAGACUAAACACGUUCAAAGUUGGAUGAGCAGAUCAGGCUGGCAGCUUCAAUCCUUCACAAC\
) } def
/len { sequence length } bind def

/coor [
[84.65360260 639.43627930]
[72.31819153 630.02258301]
[67.90412140 615.14660645]
[73.10869598 600.52838135]
[85.93064117 591.78900146]
[86.25119019 576.79241943]
[86.57173157 561.79583740]
[86.89228058 546.79925537]
[87.21282959 531.80267334]
[79.74926758 518.91296387]
[87.77970886 505.28131104]
[88.10025787 490.28472900]
[88.42080688 475.28814697]
[88.74134827 460.29156494]
[89.06189728 445.29501343]
[89.38243866 430.29843140]
[89.70298767 415.30184937]
[90.02353668 400.30526733]
[90.34407806 385.30871582]
[90.66462708 370.31213379]
[90.98517609 355.31555176]
[91.30571747 340.31896973]
[83.84216309 327.42926025]
[91.87260437 313.79757690]
[92.19315338 298.80102539]
[82.91651917 283.93994141]
[92.50000000 268.25457764]
[92.50000000 253.25457764]
[92.50000000 238.25457764]
[92.50000000 223.25457764]
[92.50000000 208.25457764]
[92.50000000 193.25457764]
[92.50000000 178.25457764]
[81.81912994 167.93688965]
[81.60544586 152.72476196]
[92.50000000 141.59164429]
[92.50000000 126.59163666]
[74.50986481 123.82427979]
[58.75122070 108.67840576]
[53.36453247 83.66603088]
[39.07900238 79.09179688]
[24.79347229 74.51755524]
[7.86495399 75.44577026]
[2.28673339 59.43578339]
[16.12684250 49.64355469]
[29.36771011 60.23202896]
[43.65324020 64.80626678]
[57.93877029 69.38050079]
[63.27032852 64.10561371]
[52.72054672 53.44248962]
[42.17076492 42.77936935]
[31.62098503 32.11625290]
[18.29254723 25.23491859]
[20.71855545 10.43240166]
[35.54629135 8.16562843]
[42.28410339 21.56647110]
[52.83388519 32.22959137]
[63.38366699 42.89270782]
[73.93344879 53.55582809]
[79.26500702 48.28093719]
[74.84368134 33.94734573]
[70.42235565 19.61375427]
[66.00102234 5.28016233]
[51.91285324 -1.88216913]
[47.09505081 -16.93422318]
[54.40592957 -30.94588089]
[69.50807953 -35.60427856]
[83.44165802 -28.14566612]
[87.94012451 -12.99511051]
[80.33461761 0.85883456]
[84.75594330 15.19242668]
[89.17726898 29.52601814]
[93.59860229 43.85961151]
[100.83256531 45.83943176]
[104.79244995 31.37155914]
[119.26025391 35.33168030]
[115.30050659 49.79907227]
[122.53447723 51.77889252]
[133.63864136 41.69438171]
[144.74281311 31.60986710]
[155.84698486 21.52535439]
[166.95115662 11.44084072]
[163.80757141 -3.52796483]
[168.54724121 -17.96514893]
[179.80213928 -28.02466393]
[194.48286438 -31.07955170]
[208.62629700 -26.40741920]
[219.73046875 -36.49193192]
[230.83464050 -46.57644653]
[230.04135132 -62.19389343]
[239.51353455 -74.63622284]
[254.77873230 -78.02854919]
[268.62918091 -70.76911163]
[274.52508545 -56.28560257]
[269.68264771 -41.41669083]
[256.38824463 -33.18301773]
[240.91914368 -35.47227478]
[229.81497192 -25.38776207]
[218.71081543 -15.30324841]
[222.00326538 -0.77653629]
[217.55279541 13.54300880]
[206.45904541 23.77994537]
[191.63345337 27.11141586]
[177.03567505 22.54501152]
[165.93150330 32.62952423]
[154.82733154 42.71403885]
[143.72315979 52.79854965]
[132.61898804 62.88306427]
[137.56692505 108.52079010]
[107.50000000 126.59163666]
[107.50000000 141.59164429]
[118.39455414 152.72476196]
[118.18087006 167.93688965]
[107.50000000 178.25457764]
[107.50000000 193.25457764]
[107.50000000 208.25457764]
[107.50000000 223.25457764]
[107.50000000 238.25457764]
[107.50000000 253.25457764]
[107.50000000 268.25457764]
[116.07533264 277.95108032]
[115.72658539 290.48886108]
[107.18972778 299.12155151]
[106.86917877 314.11813354]
[114.30980682 328.08050537]
[106.30229187 340.63952637]
[105.98175049 355.63610840]
[105.66120148 370.63265991]
[105.34065247 385.62924194]
[105.02011108 400.62582397]
[104.69956207 415.62240601]
[104.37901306 430.61895752]
[104.05847168 445.61553955]
[103.73792267 460.61212158]
[103.41738129 475.60870361]
[103.09683228 490.60525513]
[102.77628326 505.60183716]
[110.21691132 519.56420898]
[102.20940399 532.12322998]
[101.88885498 547.11981201]
[101.56830597 562.11639404]
[101.24776459 577.11297607]
[100.92721558 592.10955811]
[113.36402130 601.38885498]
[117.93920135 616.21606445]
[112.89351654 630.88989258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 143]
[6 142]
[7 141]
[8 140]
[9 139]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 124]
[25 123]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[36 111]
[37 110]
[40 48]
[41 47]
[42 46]
[60 73]
[61 72]
[62 71]
[63 70]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[87 99]
[88 98]
[89 97]
] def

init

% Start Annotations
11 31 8 RED omark 118 139 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
