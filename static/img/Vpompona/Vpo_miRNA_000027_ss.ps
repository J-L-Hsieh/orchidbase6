%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUGUGUAAUGAAGUUUGAUCCAAGAUCCUCCUCCAAAUCAUUCACACAAUCUUGAGAAAAAAAAAAAAUGGGUUUCGGUUAAUCUUGAUCCUCAGAUUCAUGGAGAGAUCUCGGACCAGGCUUCAUUCCUCACACC\
) } def
/len { sequence length } bind def

/coor [
[97.14489746 683.84808350]
[97.14489746 668.84808350]
[97.14489746 653.84808350]
[97.14489746 638.84808350]
[97.14489746 623.84808350]
[97.14489746 608.84808350]
[89.40760040 596.12084961]
[97.14489746 582.32061768]
[89.40760040 569.59338379]
[97.14489746 555.79321289]
[97.14489746 540.79321289]
[97.14489746 525.79321289]
[97.14489746 510.79321289]
[97.14489746 495.79321289]
[97.14489746 480.79321289]
[97.14489746 465.79321289]
[97.14489746 450.79321289]
[97.14489746 435.79321289]
[97.14489746 420.79321289]
[97.14489746 405.79321289]
[89.40760040 393.06591797]
[97.14489746 379.26574707]
[97.14489746 364.26574707]
[97.14489746 349.26574707]
[89.40760040 336.53848267]
[97.14489746 322.73831177]
[97.14489746 307.73831177]
[97.14489746 292.73831177]
[97.14489746 277.73831177]
[97.14489746 262.73831177]
[96.97660065 247.73925781]
[96.64002991 232.74304199]
[96.30345917 217.74681091]
[95.96688843 202.75059509]
[84.29940033 196.16809082]
[77.37046051 184.57635498]
[77.09293365 170.96589661]
[83.64722443 158.91062927]
[95.40567017 151.62937927]
[95.40567017 136.62937927]
[95.40567017 121.62938690]
[95.40567017 106.62938690]
[85.59458923 110.21539307]
[73.72544861 107.24046326]
[63.26704025 97.09055328]
[52.19525528 86.97049713]
[41.12347031 76.85044098]
[25.94935608 80.09481049]
[11.77993774 73.76968384]
[4.06364346 60.30720139]
[5.76754522 44.88396454]
[16.23645973 33.43051529]
[31.44487381 30.35094261]
[45.54484177 36.82940674]
[53.11463928 50.37480545]
[51.24352646 65.77865601]
[62.31531143 75.89871216]
[73.38710022 86.01876831]
[80.85690308 85.34647369]
[75.99230957 71.15718842]
[71.12772369 56.96790695]
[61.40877151 45.54241180]
[60.20510864 30.59078217]
[67.97115326 17.75767708]
[81.77500153 11.88795185]
[96.40532684 15.19758892]
[106.33876801 26.43710899]
[107.82517242 41.36328125]
[100.30216217 54.34215927]
[98.04933929 69.17201996]
[95.79651642 84.00188446]
[103.26632690 83.32958984]
[112.35317230 71.39521790]
[121.44002533 59.46085358]
[130.52687073 47.52648544]
[128.60324097 32.06888580]
[137.98860168 20.09518433]
[152.73692322 18.35655022]
[161.82377625 6.42218208]
[170.91062927 -5.51218605]
[179.99746704 -17.44655418]
[177.62791443 -33.07219696]
[187.06851196 -45.74699783]
[202.71833801 -47.95122147]
[215.29261780 -38.37714005]
[217.33125305 -22.70488739]
[207.62477112 -10.23253345]
[191.93183899 -8.35970402]
[182.84498596 3.57466435]
[173.75813293 15.50903225]
[164.67129517 27.44340134]
[166.91889954 42.12276840]
[157.87355042 54.35535812]
[142.46124268 56.61333466]
[133.37438965 68.54770660]
[124.28754425 80.48207092]
[115.20069122 92.41644287]
[110.40567017 106.62938690]
[110.40567017 121.62938690]
[110.40567017 136.62937927]
[110.40567017 151.62937927]
[124.20117950 161.34776306]
[129.46273804 177.20700073]
[124.31515503 192.92935181]
[110.96311188 202.41401672]
[111.29968262 217.41024780]
[111.63625336 232.40646362]
[111.97282410 247.40269470]
[115.31659698 255.99388123]
[112.14489746 262.73831177]
[112.14489746 277.73831177]
[112.14489746 292.73831177]
[112.14489746 307.73831177]
[112.14489746 322.73831177]
[119.88219452 336.53848267]
[112.14489746 349.26574707]
[112.14489746 364.26574707]
[112.14489746 379.26574707]
[119.88219452 393.06591797]
[112.14489746 405.79321289]
[112.14489746 420.79321289]
[112.14489746 435.79321289]
[112.14489746 450.79321289]
[112.14489746 465.79321289]
[112.14489746 480.79321289]
[112.14489746 495.79321289]
[112.14489746 510.79321289]
[112.14489746 525.79321289]
[112.14489746 540.79321289]
[112.14489746 555.79321289]
[119.88219452 569.59338379]
[112.14489746 582.32061768]
[119.88219452 596.12084961]
[112.14489746 608.84808350]
[112.14489746 623.84808350]
[112.14489746 638.84808350]
[112.14489746 653.84808350]
[112.14489746 668.84808350]
[112.14489746 683.84808350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 139]
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[8 132]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[22 118]
[23 117]
[24 116]
[26 114]
[27 113]
[28 112]
[29 111]
[30 110]
[31 108]
[32 107]
[33 106]
[34 105]
[39 101]
[40 100]
[41 99]
[42 98]
[45 58]
[46 57]
[47 56]
[72 97]
[73 96]
[74 95]
[75 94]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% Start Annotations
12 31 8 RED omark 110 130 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
