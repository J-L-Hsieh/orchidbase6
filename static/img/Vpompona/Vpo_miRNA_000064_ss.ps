%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGUAAUUUCCCACAGCUUAAUUGAACUGAAACCCUAACCCUAGUCCUCUUUUUUCACAAAGGAUUUAAAUAUGCAGUUCAAGAAAGCUGUGGAAGACUACAAGGA\
) } def
/len { sequence length } bind def

/coor [
[96.83715820 250.54756165]
[96.40489197 235.55378723]
[85.43112183 225.54818726]
[84.77914429 210.34852600]
[95.34834290 198.90606689]
[94.91606903 183.91230774]
[94.48380280 168.91853333]
[86.38294220 156.41952515]
[93.71933746 142.40209961]
[93.28706360 127.40833282]
[92.85479736 112.41456604]
[85.68200684 100.41278839]
[92.15143585 88.01770020]
[91.71916199 73.02393341]
[91.28689575 58.03016281]
[90.85462952 43.03639221]
[90.42235565 28.04262352]
[89.99008942 13.04885292]
[89.55781555 -1.94491708]
[89.12554932 -16.93868637]
[88.69328308 -31.93245697]
[77.48241425 -42.74699783]
[77.25762939 -57.95897293]
[87.63672638 -68.58016968]
[87.20446014 -83.57393646]
[86.77218628 -98.56771088]
[86.33992004 -113.56147766]
[85.90765381 -128.55525208]
[85.47537994 -143.54902649]
[85.04311371 -158.54278564]
[84.61083984 -173.53656006]
[72.25347137 -176.17628479]
[60.75719452 -181.40318298]
[50.65631485 -188.97084045]
[42.41953659 -198.52410889]
[36.42819595 -209.61581421]
[32.95863342 -221.72766113]
[32.16943359 -234.29444885]
[34.09417343 -246.73051453]
[38.64003372 -258.45690918]
[45.59223557 -268.92843628]
[54.62421036 -277.65896606]
[65.31293488 -284.24407959]
[77.15872192 -288.37966919]
[89.60862732 -289.87603760]
[91.33412170 -304.77645874]
[93.05960846 -319.67687988]
[94.78509521 -334.57730103]
[96.51058960 -349.47772217]
[98.23607635 -364.37814331]
[85.31008911 -372.49490356]
[77.19317627 -385.42080688]
[75.49696350 -400.58935547]
[80.55821991 -414.98889160]
[91.37203979 -425.76034546]
[105.79132080 -430.76504517]
[120.95311737 -429.00927734]
[133.84704590 -420.84167480]
[141.91299438 -407.88394165]
[143.54945374 -392.70880127]
[138.43153381 -378.32931519]
[127.57538605 -367.60052490]
[113.13649750 -362.65267944]
[111.41101074 -347.75222778]
[109.68552399 -332.85180664]
[107.96003723 -317.95138550]
[106.23454285 -303.05096436]
[104.50905609 -288.15054321]
[120.77755737 -281.38748169]
[134.28358459 -270.04888916]
[143.77908325 -255.16989136]
[148.38275146 -238.11325073]
[147.66194153 -220.44468689]
[141.67317200 -203.78913879]
[130.95793152 -189.68130493]
[116.49364471 -179.42417908]
[99.60461426 -173.96882629]
[100.03688049 -158.97506714]
[100.46915436 -143.98129272]
[100.90142059 -128.98751831]
[101.33368683 -113.99375153]
[101.76596069 -98.99997711]
[102.19822693 -84.00621033]
[102.63050079 -69.01243591]
[113.60427094 -59.00684357]
[114.25624084 -43.80718613]
[103.68704987 -32.36472702]
[104.11931610 -17.37095642]
[104.55158997 -2.37718654]
[104.98385620 12.61658382]
[105.41613007 27.61035347]
[105.84839630 42.60412216]
[106.28066254 57.59789276]
[106.71293640 72.59166718]
[107.14520264 87.58543396]
[114.31799316 99.58721161]
[107.84856415 111.98229980]
[108.28083801 126.97606659]
[108.71310425 141.96983337]
[116.84488678 155.54130554]
[109.47756958 168.48626709]
[109.90984344 183.48002625]
[110.34210968 198.47380066]
[121.55297089 209.28834534]
[121.77776337 224.50032043]
[111.39865875 235.12152100]
[111.83093262 250.11528015]
[114.57582855 269.30163574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[5 103]
[6 102]
[7 101]
[9 99]
[10 98]
[11 97]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
] def

init

% Start Annotations
78 96 8 RED omark 14 32 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
