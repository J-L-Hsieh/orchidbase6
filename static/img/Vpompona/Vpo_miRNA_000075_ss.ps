%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAGGGGAAUGUUGUCUGGCUCGAGGCCUCUCCGUCGUCCACGACCGAGGUGAGAGAGAAAGAGAGAGAGAGAGAGGUGUCCUCGGACCAGGCUUCAUUCCCCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 500.85607910]
[92.50000000 485.01693726]
[92.50000000 470.01693726]
[92.50000000 455.01693726]
[84.76270294 442.28967285]
[92.50000000 428.48950195]
[92.50000000 413.48950195]
[92.50000000 398.48950195]
[92.50000000 383.48950195]
[92.50000000 368.48950195]
[92.50000000 353.48950195]
[92.50000000 338.48950195]
[92.50000000 323.48950195]
[81.81912994 313.17181396]
[81.60544586 297.95968628]
[92.50000000 286.82656860]
[92.50000000 271.82656860]
[92.50000000 256.82656860]
[92.50000000 241.82656860]
[92.50000000 226.82656860]
[92.50000000 211.82656860]
[84.76270294 199.09928894]
[92.50000000 185.29911804]
[92.50000000 170.29911804]
[92.50000000 155.29911804]
[92.50000000 140.29911804]
[92.50000000 125.29911804]
[92.50000000 110.29911804]
[91.86338043 95.31263733]
[90.59129333 80.36667633]
[89.31920624 65.42070770]
[88.04711914 50.47474670]
[86.77502441 35.52878571]
[85.50293732 20.58282280]
[73.70347595 10.41372871]
[72.62631226 -4.76172400]
[82.39369965 -15.94803715]
[81.12161255 -30.89399910]
[77.22658539 -39.32225418]
[80.03113556 -46.27993011]
[79.18251038 -61.25590515]
[75.60863495 -75.82392883]
[69.43011475 -89.49235535]
[63.25159454 -103.16078949]
[48.14775085 -107.21144867]
[39.22364807 -120.05256653]
[40.69298172 -135.62097168]
[51.86197281 -146.56571960]
[67.45697021 -147.71905518]
[80.11448669 -138.53639221]
[83.85803223 -123.35351562]
[76.92002106 -109.33930206]
[83.09854126 -95.67087555]
[89.27706146 -82.00244904]
[92.90966797 -96.55594635]
[102.02663422 -108.46731567]
[115.12634277 -115.77468872]
[130.05117798 -117.27448273]
[144.34291077 -112.71966553]
[155.64759827 -102.86045837]
[162.10328674 -89.32073975]
[162.64666748 -74.33058167]
[157.18826294 -60.35897827]
[146.62709045 -49.70714569]
[132.70263672 -44.12951279]
[117.70838928 -44.54475403]
[104.11398315 -50.88447571]
[94.15848541 -62.10453033]
[95.00711060 -47.12855530]
[96.06757355 -32.16608810]
[97.33966827 -17.22012711]
[108.85706329 -7.84541559]
[110.36005402 7.29379416]
[100.44889832 19.31073380]
[101.72098541 34.25669861]
[102.99308014 49.20265961]
[104.26516724 64.14862061]
[105.53725433 79.09458160]
[106.80934143 94.04054260]
[109.51499176 97.01641083]
[110.82740021 101.20924377]
[110.21836090 105.93647003]
[107.50000000 110.29911804]
[107.50000000 125.29911804]
[107.50000000 140.29911804]
[107.50000000 155.29911804]
[107.50000000 170.29911804]
[107.50000000 185.29911804]
[115.23729706 199.09928894]
[107.50000000 211.82656860]
[107.50000000 226.82656860]
[107.50000000 241.82656860]
[107.50000000 256.82656860]
[107.50000000 271.82656860]
[107.50000000 286.82656860]
[118.39455414 297.95968628]
[118.18087006 313.17181396]
[107.50000000 323.48950195]
[107.50000000 338.48950195]
[107.50000000 353.48950195]
[107.50000000 368.48950195]
[107.50000000 383.48950195]
[107.50000000 398.48950195]
[107.50000000 413.48950195]
[107.50000000 428.48950195]
[115.23729706 442.28967285]
[107.50000000 455.01693726]
[107.50000000 470.01693726]
[107.50000000 485.01693726]
[113.54634094 500.85607910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 79]
[30 78]
[31 77]
[32 76]
[33 75]
[34 74]
[37 71]
[38 70]
[40 69]
[41 68]
[42 54]
[43 53]
[44 52]
] def

init

% Start Annotations
8 28 8 RED omark 85 105 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
