%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAGGGGAAUGUUGUCUGGCUCGAGGCGUCCCAUUCCACCAUGUCUUCUCUUCCAUUGAUAGAAAGAAAGAGGGCAAUUUUUGGAAGUGAAGAGCUUGGACCAGGCUUCAUUCCCCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[83.36885071 518.35784912]
[89.41519165 502.51870728]
[89.41519165 487.51870728]
[89.41519165 472.51870728]
[81.67788696 459.79141235]
[89.41519165 445.99124146]
[89.41519165 430.99124146]
[89.41519165 415.99124146]
[89.41519165 400.99124146]
[89.41519165 385.99124146]
[89.41519165 370.99124146]
[89.41519165 355.99124146]
[89.41519165 340.99124146]
[78.73432159 330.67358398]
[78.52063751 315.46142578]
[89.41519165 304.32830811]
[89.41519165 289.32830811]
[89.41519165 274.32830811]
[89.41519165 259.32830811]
[89.41519165 244.32830811]
[89.41519165 229.32830811]
[86.23264313 222.56245422]
[89.61001587 213.94952393]
[89.99000549 198.95434570]
[82.57760620 186.03514099]
[90.66201782 172.43540955]
[91.04200745 157.44021606]
[91.42199707 142.44503784]
[91.80198669 127.44985199]
[79.19969940 119.69895935]
[72.14517212 106.69404602]
[72.51997375 91.90372467]
[80.22412872 79.27280426]
[93.20282745 72.17015839]
[93.58281708 57.17497253]
[93.96280670 42.17978668]
[94.34279633 27.18460083]
[94.53280640 12.18580532]
[94.53280640 -2.81419468]
[94.53280640 -17.81419563]
[79.60125732 -27.93143654]
[73.69959259 -44.80999756]
[78.98075867 -61.72977066]
[93.18396759 -72.07099915]
[92.42422485 -87.05175018]
[91.66448975 -102.03249359]
[90.90475464 -117.01324463]
[90.14501953 -131.99398804]
[89.38527679 -146.97474670]
[88.62554169 -161.95549011]
[87.86580658 -176.93623352]
[84.27132416 -185.46084595]
[87.28145599 -192.30514526]
[86.90146637 -207.30033875]
[86.52147675 -222.29551697]
[75.34838104 -233.14909363]
[75.17662811 -248.36175537]
[85.59270477 -258.94668579]
[85.21270752 -273.94189453]
[76.19905853 -287.64175415]
[83.79747772 -302.17431641]
[100.19136047 -302.58975220]
[108.51609039 -288.46069336]
[100.20789337 -274.32186890]
[100.58789062 -259.32669067]
[111.52671051 -249.28289795]
[112.12568665 -234.08105469]
[101.51666260 -222.67552185]
[101.89665222 -207.68032837]
[102.27664185 -192.68513489]
[102.84654999 -177.69596863]
[103.60628510 -162.71522522]
[104.36602783 -147.73448181]
[105.12576294 -132.75372314]
[105.88549805 -117.77297974]
[106.64524078 -102.79223633]
[107.40497589 -87.81148529]
[108.16471100 -72.83074188]
[119.31446075 -67.71423340]
[127.24293518 -58.25793457]
[130.37292480 -46.24614716]
[128.04037476 -33.98046112]
[120.63416290 -23.83874893]
[109.53280640 -17.81419563]
[109.53280640 -2.81419468]
[109.53280640 12.18580532]
[112.71535492 18.95166397]
[109.33798218 27.56459236]
[108.95799255 42.55978012]
[108.57800293 57.55496597]
[108.19801331 72.55014801]
[120.80030060 80.30104065]
[127.85482788 93.30595398]
[127.48002625 108.09627533]
[119.77587128 120.72719574]
[106.79717255 127.82984161]
[106.41718292 142.82502747]
[106.03719330 157.82020569]
[105.65720367 172.81539917]
[113.04242706 186.80714417]
[104.98519135 199.33433533]
[104.60520172 214.32951355]
[104.41519165 229.32830811]
[104.41519165 244.32830811]
[104.41519165 259.32830811]
[104.41519165 274.32830811]
[104.41519165 289.32830811]
[104.41519165 304.32830811]
[115.30974579 315.46142578]
[115.09606171 330.67358398]
[104.41519165 340.99124146]
[104.41519165 355.99124146]
[104.41519165 370.99124146]
[104.41519165 385.99124146]
[104.41519165 400.99124146]
[104.41519165 415.99124146]
[104.41519165 430.99124146]
[104.41519165 445.99124146]
[112.15248871 459.79141235]
[104.41519165 472.51870728]
[104.41519165 487.51870728]
[104.41519165 502.51870728]
[110.46153259 518.35784912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[16 108]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[23 102]
[24 101]
[26 99]
[27 98]
[28 97]
[29 96]
[34 91]
[35 90]
[36 89]
[37 88]
[38 86]
[39 85]
[40 84]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[53 70]
[54 69]
[55 68]
[58 65]
[59 64]
] def

init

% Start Annotations
8 28 8 RED omark 99 118 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
