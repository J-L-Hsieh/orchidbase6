%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUGAGCGAUUGAAGCUGCGAGAUGAUCUGAUCACUUGGAGAGAAGCAGAAGGAGAAGGAGAAGAAAGACCAGAUCAUGCUGGCAGCUUCAGCCUCUCACACC\
) } def
/len { sequence length } bind def

/coor [
[85.07665253 405.37124634]
[85.07665253 390.37124634]
[85.07665253 375.37124634]
[85.07665253 360.37124634]
[81.87897491 353.57553101]
[85.30331421 344.93249512]
[85.74365997 329.93896484]
[86.18400574 314.94543457]
[86.62435150 299.95190430]
[79.26401520 287.00299072]
[87.40310669 273.43588257]
[80.04277039 260.48696899]
[88.18186188 246.91987610]
[88.62220764 231.92634583]
[89.06255341 216.93281555]
[89.50289917 201.93927002]
[89.94324493 186.94573975]
[90.38359070 171.95220947]
[90.82393646 156.95866394]
[91.26428986 141.96513367]
[91.70463562 126.97160339]
[92.14498138 111.97806549]
[85.68222809 99.57949829]
[92.86148071 87.58158875]
[93.30183411 72.58805084]
[93.52202606 57.58966827]
[93.52202606 42.58966827]
[93.52202606 27.58966827]
[93.52202606 12.58966827]
[93.52202606 -2.41033196]
[93.52202606 -17.41033173]
[93.52202606 -32.41033173]
[93.52202606 -47.41033173]
[85.78472900 -61.21050262]
[93.52202606 -73.93777466]
[93.52202606 -88.93777466]
[82.58946228 -105.74817657]
[92.59459686 -122.18473053]
[91.71427917 -137.15887451]
[90.83396912 -152.13302612]
[76.00873566 -154.86723328]
[62.26892090 -161.07054138]
[50.41334915 -170.38229370]
[41.13127899 -182.26112366]
[34.96236420 -196.01641846]
[32.26525116 -210.84844971]
[33.19675064 -225.89489746]
[37.70270538 -240.28099060]
[45.52114487 -253.17034912]
[56.19751358 -263.81359863]
[69.11110687 -271.59191895]
[83.51113892 -276.05316162]
[98.56040955 -276.93786621]
[113.38398743 -274.19467163]
[127.12003326 -267.98303223]
[138.96995544 -258.66409302]
[148.24482727 -246.77964783]
[154.40539551 -233.02062988]
[157.09352112 -218.18696594]
[156.15289307 -203.14108276]
[151.63822937 -188.75772095]
[143.81196594 -175.87310791]
[133.12915039 -165.23634338]
[120.21084595 -157.46582031]
[105.80811310 -153.01333618]
[106.68842316 -138.03918457]
[107.56874084 -123.06504822]
[115.92424774 -116.85395050]
[119.47454071 -106.83145905]
[116.78227997 -96.31634521]
[108.52202606 -88.93777466]
[108.52202606 -73.93777466]
[116.25933075 -61.21050262]
[108.52202606 -47.41033173]
[108.52202606 -32.41033173]
[108.52202606 -17.41033173]
[108.52202606 -2.41033196]
[108.52202606 12.58966827]
[108.52202606 27.58966827]
[108.52202606 42.58966827]
[108.52202606 57.58966827]
[111.71970367 64.38539124]
[108.29536438 73.02839661]
[107.85501862 88.02193451]
[114.31777191 100.42050171]
[107.13851929 112.41841125]
[106.69816589 127.41194916]
[106.25782013 142.40548706]
[105.81747437 157.39901733]
[105.37712860 172.39254761]
[104.93678284 187.38609314]
[104.49643707 202.37962341]
[104.05609131 217.37315369]
[103.61573792 232.36669922]
[103.17539215 247.36022949]
[110.50423431 261.38159180]
[102.39664459 273.87625122]
[109.72548676 287.89761353]
[101.61788940 300.39224243]
[101.17754364 315.38577271]
[100.73719788 330.37933350]
[100.29685211 345.37286377]
[100.07665253 360.37124634]
[100.07665253 375.37124634]
[100.07665253 390.37124634]
[100.07665253 405.37124634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[6 102]
[7 101]
[8 100]
[9 99]
[11 97]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[24 84]
[25 83]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[35 72]
[36 71]
[38 67]
[39 66]
[40 65]
] def

init

% Start Annotations
14 33 8 RED omark 76 96 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
