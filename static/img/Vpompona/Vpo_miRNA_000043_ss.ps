%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAAUAACUGGGCGAUUCCUCCUUUGGCAGAAGCUGCAACUGCUUCUCCUGCAUUUUUUAUUGCGGAGCAUAUAGCAAGGUGAGAUAGCUUCUGCCAAAGGAGAUUUGCCCAGUAAUUCAGCA\
) } def
/len { sequence length } bind def

/coor [
[78.98497009 650.33349609]
[71.23342896 636.75238037]
[74.07604980 621.37530518]
[86.17063141 611.46295166]
[86.17063141 596.46295166]
[86.17063141 581.46295166]
[86.17063141 566.46295166]
[86.17063141 551.46295166]
[78.43333435 538.73565674]
[86.17063141 524.93548584]
[86.17063141 509.93548584]
[86.17063141 494.93548584]
[86.17063141 479.93548584]
[86.17063141 464.93548584]
[86.17063141 449.93548584]
[86.17063141 434.93548584]
[86.17063141 419.93548584]
[86.17063141 404.93548584]
[78.43333435 392.20822144]
[86.17063141 378.40805054]
[86.17063141 363.40805054]
[82.99032593 356.64660645]
[86.36074829 348.03817749]
[86.73175812 333.04275513]
[87.10277557 318.04736328]
[87.47379303 303.05194092]
[87.84481049 288.05654907]
[88.21582794 273.06112671]
[88.58684540 258.06570435]
[88.95786285 243.07029724]
[89.32887268 228.07489014]
[89.69989014 213.07948303]
[90.07090759 198.08407593]
[90.44192505 183.08865356]
[90.81294250 168.09324646]
[91.18395996 153.09783936]
[91.55497742 138.10243225]
[91.92598724 123.10701752]
[92.29700470 108.11160278]
[92.48252869 93.11275482]
[82.89459991 77.45018768]
[92.12751770 62.58052444]
[91.75650024 47.58511353]
[91.38549042 32.58970261]
[90.64368439 17.60805702]
[89.53153992 2.64934301]
[88.41939545 -12.30937195]
[74.32073975 -29.65418243]
[83.93203735 -49.00206375]
[81.34761810 -63.77774429]
[78.76319885 -78.55342865]
[76.17877960 -93.32910919]
[71.57242584 -101.34449768]
[73.71790314 -108.50188446]
[71.49974060 -123.33696747]
[69.28157806 -138.17205811]
[55.45561981 -145.21636963]
[48.44074249 -159.05729675]
[50.93431091 -174.37271118]
[61.97750092 -185.27351379]
[77.32397461 -187.56813049]
[91.07270813 -180.37425232]
[97.93702698 -166.45803833]
[95.27745819 -151.17057800]
[84.11666870 -140.39021301]
[86.33482361 -125.55513000]
[88.55298615 -110.72004700]
[90.95446014 -95.91352844]
[93.53887939 -81.13784790]
[96.12329865 -66.36216736]
[98.70771790 -51.58648300]
[106.18682098 -48.44070816]
[111.83264923 -42.48213959]
[114.63507080 -34.66603470]
[114.04838562 -26.28844833]
[110.09576416 -18.77140427]
[103.37811279 -13.42151260]
[104.49025726 1.53720164]
[105.60239410 16.49591637]
[108.65438080 20.29644585]
[109.27864838 26.08215332]
[106.38089752 32.21868896]
[106.75191498 47.21409988]
[107.12293243 62.20951080]
[115.70040131 70.83428955]
[116.07000732 83.39498901]
[107.48252869 93.11275482]
[110.65983582 100.62274933]
[107.29241943 108.48262024]
[106.92140198 123.47803497]
[106.55038452 138.47344971]
[106.17936707 153.46885681]
[105.80834961 168.46426392]
[105.43733978 183.45967102]
[105.06632233 198.45509338]
[104.69530487 213.45050049]
[104.32428741 228.44590759]
[103.95326996 243.44131470]
[103.58225250 258.43673706]
[103.21123505 273.43212891]
[102.84021759 288.42755127]
[102.46920776 303.42297363]
[102.09819031 318.41836548]
[101.72717285 333.41378784]
[101.35615540 348.40921021]
[101.17063141 363.40805054]
[101.17063141 378.40805054]
[108.90793610 392.20822144]
[101.17063141 404.93548584]
[101.17063141 419.93548584]
[101.17063141 434.93548584]
[101.17063141 449.93548584]
[101.17063141 464.93548584]
[101.17063141 479.93548584]
[101.17063141 494.93548584]
[101.17063141 509.93548584]
[101.17063141 524.93548584]
[108.90793610 538.73565674]
[101.17063141 551.46295166]
[101.17063141 566.46295166]
[101.17063141 581.46295166]
[101.17063141 596.46295166]
[101.17063141 611.46295166]
[113.26521301 621.37530518]
[116.10783386 636.75238037]
[108.35629272 650.33349609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[10 117]
[11 116]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[20 107]
[21 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 87]
[42 84]
[43 83]
[44 82]
[45 79]
[46 78]
[47 77]
[49 71]
[50 70]
[51 69]
[52 68]
[54 67]
[55 66]
[56 65]
] def

init

% Start Annotations
13 38 8 RED omark 92 116 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
