%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Mar 23 16:31:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAGAAUCUGUAAUGCUCAGGAUAGAUAGCGUCACAGAAGAAGAAGAAAAAGCUGCCUCAAAAAAGGAAACGAAGCCCUGUAGUGAACCAUGGCGCUAUCCCUCCUGAGCUUUAUAGAUUUCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[89.50308990 452.77597046]
[89.28826904 436.97314453]
[100.37036896 425.70538330]
[100.00791168 410.70977783]
[91.96533203 398.17318726]
[99.36691284 384.19006348]
[99.00445557 369.19445801]
[98.64199829 354.19882202]
[98.27954102 339.20321655]
[97.91708374 324.20758057]
[97.55463409 309.21197510]
[97.19217682 294.21633911]
[96.82971954 279.22073364]
[96.46726227 264.22509766]
[96.10480499 249.22949219]
[88.06222534 236.69288635]
[95.46380615 222.70979309]
[95.10134888 207.71417236]
[94.73889160 192.71855164]
[94.37643433 177.72293091]
[94.01397705 162.72731018]
[93.65151978 147.73168945]
[93.28907013 132.73606873]
[92.92661285 117.74044800]
[82.50906372 107.66964722]
[82.15894318 93.18435669]
[92.07776642 82.62200928]
[91.71531677 67.62638855]
[91.35285950 52.63077164]
[90.99040222 37.63515091]
[90.62794495 22.63953018]
[90.26548767 7.64390945]
[89.90303040 -7.35171080]
[89.54057312 -22.34733200]
[89.17812347 -37.34295273]
[88.81566620 -52.33857346]
[80.77589417 -39.67515564]
[69.42349243 -29.87092018]
[55.72460556 -23.76024055]
[40.84505081 -21.86316109]
[26.05114555 -24.34113312]
[12.60190487 -30.98326683]
[1.64191568 -41.22429276]
[-5.89608479 -54.19266129]
[-9.37058258 -68.78470612]
[-8.48588467 -83.75859833]
[-3.31728172 -97.83998871]
[5.69535732 -109.83049774]
[17.78502083 -118.70968628]
[31.92283249 -123.72190094]
[46.90560532 -124.44058990]
[61.45824814 -120.80457306]
[74.34226990 -113.12330627]
[84.46119690 -102.05048370]
[90.95385742 -88.52845001]
[93.26772308 -73.70670319]
[99.58873749 -87.30981445]
[94.40026093 -101.99713898]
[101.00445557 -115.70258331]
[115.03854370 -120.55849457]
[121.35955811 -134.16160583]
[127.68058014 -147.76472473]
[118.97494507 -160.34086609]
[117.74118042 -175.48597717]
[124.21080780 -189.12454224]
[136.55584717 -197.63664246]
[151.40402222 -198.81867981]
[157.72505188 -212.42179871]
[164.04606628 -226.02490234]
[155.70443726 -239.00260925]
[155.72613525 -254.42996216]
[164.10423279 -267.38415527]
[178.16532898 -273.73153687]
[193.42256165 -271.44668579]
[205.00740051 -261.25869751]
[209.22317505 -246.41853333]
[204.72463989 -231.66160583]
[192.94728088 -221.69682312]
[177.64918518 -219.70388794]
[171.32815552 -206.10076904]
[165.00714111 -192.49766541]
[173.67843628 -180.38673401]
[175.13310242 -165.46226501]
[168.88082886 -151.72271729]
[156.50959778 -142.89949036]
[141.28369141 -141.44371033]
[134.96267700 -127.84059143]
[128.64166260 -114.23748016]
[133.97998047 -100.37970734]
[127.76335907 -86.49417114]
[113.19185638 -80.98880005]
[106.87084198 -67.38568115]
[103.81128693 -52.70102692]
[104.17373657 -37.70540619]
[104.53619385 -22.70978737]
[104.89865112 -7.71416712]
[105.26110840 7.28145313]
[105.62356567 22.27707291]
[105.98602295 37.27269363]
[106.34848022 52.26831436]
[106.71092987 67.26393127]
[107.07338715 82.25955200]
[117.49093628 92.33035278]
[117.84105682 106.81564331]
[107.92223358 117.37799072]
[108.28468323 132.37361145]
[108.64714050 147.36923218]
[109.00959778 162.36485291]
[109.37205505 177.36047363]
[109.73451233 192.35609436]
[110.09696960 207.35171509]
[110.45942688 222.34733582]
[118.52793121 235.95651245]
[111.10042572 248.86703491]
[111.46288300 263.86264038]
[111.82534027 278.85827637]
[112.18779755 293.85388184]
[112.55024719 308.84951782]
[112.91270447 323.84512329]
[113.27516174 338.84075928]
[113.63761902 353.83636475]
[114.00007629 368.83200073]
[114.36253357 383.82760620]
[122.43103790 397.43679810]
[115.00353241 410.34732056]
[115.36598969 425.34292603]
[126.97953796 436.06213379]
[127.52845001 451.85687256]
[116.68707275 463.35644531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[56 92]
[57 91]
[60 88]
[61 87]
[62 86]
[67 81]
[68 80]
[69 79]
] def

init

% Start Annotations
9 36 8 RED omark 95 122 8 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
